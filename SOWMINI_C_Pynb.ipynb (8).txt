{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "SOWMINI. C. Pynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ExBQUOIPI0e",
        "outputId": "847d1a76-04b5-4f74-9b4b-2a8188c78a47"
      },
      "source": [
        " \n",
        "!pip install keras-tuner\n",
        "import tensorflow as tf \n",
        "from tensorflow import keras \n",
        "import numpy as np\n",
        "fashion_mnist=keras.datasets.fashion_mnist \n",
        "(train_images,train_labels),(test_images,test_labels)=fashion_mnist.load_data()\n",
        "train_images=train_images/255.0 \n",
        "test_images=test_images/255.0 \n",
        "train_images[0].shape\n",
        "train_images = train_images.reshape(len(train_images),28, 28,1) \n",
        "test_inages = test_images.reshape(len(test_images), 28,28,1) \n",
        "def build_model(hp): \n",
        "  model = keras.Sequential([\n",
        "     keras.layers.Conv2D( \n",
        "        filters=hp.Int('conv_1_filter', min_value=32, max_value=128, step=16), \n",
        "        kernel_size=hp.Choice('conv_1_kernel', values = [3,5]), \n",
        "        activation='relu', \n",
        "        input_shape=(28, 28,1)\n",
        "     ), \n",
        "     keras.layers.Conv2D(\n",
        "        filters=hp.Int('conv_2_filter', min_value=32, max_value=64, step=16), \n",
        "        kernel_size=hp.Choice('conv_2_kernel', values = [3,5]), \n",
        "        activation='relu'\n",
        "     ), \n",
        "     keras.layers.Flatten(), \n",
        "     keras.layers.Dense(\n",
        "        units=hp.Int('dense_1_units', min_value=32, max_value=128, step=16), \n",
        "        activation='relu' \n",
        "     ),\n",
        "     keras.layers.Dense(10, activation='softmax')\n",
        "  ])\n",
        "  model.compile(optimizer=keras.optimizers.Adam(hp.Choice('learning_rate',values=[1e-2,1e-3])), \n",
        "                loss='sparse_categorical_crossentropy',\n",
        "                metrics=['accuracy']) \n",
        "  return model\n",
        "from kerastuner import RandomSearch\n",
        "from kerastuner.engine.hyperparameters import HyperParameters \n",
        "tuner_search=RandomSearch(build_model,\n",
        "                         objective='val_accuracy',\n",
        "                         max_trials= 5,directory='output',project_name=\"Mnist Fashion\") \n",
        "tuner_search.search(train_images, train_labels, epochs=3, validation_split=0.1) \n",
        "model=tuner_search.get_best_models(num_models=1)[0]\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Trial 1 Complete [00h 08m 22s]\n",
            "val_accuracy: 0.8794999718666077\n",
            "\n",
            "Best val_accuracy So Far: 0.8794999718666077\n",
            "Total elapsed time: 00h 08m 22s\n",
            "\n",
            "Search: Running Trial #2\n",
            "\n",
            "Hyperparameter    |Value             |Best Value So Far \n",
            "conv_1_filter     |128               |80                \n",
            "conv_1_kernel     |5                 |3                 \n",
            "conv_2_filter     |64                |32                \n",
            "conv_2_kernel     |3                 |3                 \n",
            "dense_1_units     |96                |80                \n",
            "learning_rate     |0.001             |0.01              \n",
            "\n",
            "Epoch 1/3\n",
            "1688/1688 [==============================] - 287s 170ms/step - loss: 0.4001 - accuracy: 0.8548 - val_loss: 0.2956 - val_accuracy: 0.8900\n",
            "Epoch 2/3\n",
            " 727/1688 [===========>..................] - ETA: 2:40 - loss: 0.2668 - accuracy: 0.9025"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}